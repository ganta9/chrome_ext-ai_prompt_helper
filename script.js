/**
 * AI Prompt Helper Editor v6.0.0 - JavaScript
 * GitHub PagesÁ∑®ÈõÜ„Çµ„Ç§„Éà - ChromeÊã°ÂºµÊ©üËÉΩÈÄ£Êê∫ÂØæÂøú
 */

// ========================================================================== 
// „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
// ========================================================================== 

let prompts = [];
let allTags = new Set();
let currentFilter = 'all';
let currentEditId = null;
let searchQuery = '';

// GitHub API ÈÄ£Êê∫
let githubConnector = null;
let githubSettings = {
    enabled: true,
    owner: 'ganta9',
    repo: 'chrome_ext-ai_prompt_helper',
    branch: 'main',
    filePath: 'prompts.json',
    lastSyncTime: null
};



// ========================================================================== 
// ÂàùÊúüÂåñ
// ========================================================================== 

document.addEventListener('DOMContentLoaded', async () => {
    console.log('AI Prompt Helper Editor v6.0.0 ÂàùÊúüÂåñÈñãÂßã');
    
    try {
        await initializeApp();
        setupEventListeners();
        console.log('ÂàùÊúüÂåñÂÆå‰∫Ü');
    } catch (error) {
        console.error('ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
        showNotification(`ÂàùÊúüÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`, 'error');
        
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜ
        try {
            prompts = [];
            updateTagList();
            renderPrompts();
            updateCounts();
            setupEventListeners();
            console.log('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂàùÊúüÂåñÂÆå‰∫Ü');
        } catch (fallbackError) {
            console.error('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂàùÊúüÂåñ„ÇÇÂ§±Êïó:', fallbackError);
        }
    }
});

async function initializeApp() {
    try {
        showLoading(true);
        console.log('üîÑ „Çπ„ÉÜ„ÉÉ„Éó1: Ë®≠ÂÆöË™≠„ÅøËæº„ÅøÈñãÂßã');

        // GitHubË®≠ÂÆö„ÅÆË™≠„ÅøËæº„ÅøÔºàLocalStorage„Åã„ÇâÔºâ
        console.log('‚úÖ „Çπ„ÉÜ„ÉÉ„Éó1-1ÂÆå‰∫Ü: GitHubË®≠ÂÆöÁ¢∫Ë™ç');

        // GitHub APIÈÄ£Êê∫ÂàùÊúüÂåñ
        await initializeGitHubConnection();
        console.log('‚úÖ „Çπ„ÉÜ„ÉÉ„Éó1-2ÂÆå‰∫Ü: GitHub APIÈÄ£Êê∫ÂàùÊúüÂåñ');

        console.log('üîÑ „Çπ„ÉÜ„ÉÉ„Éó2: „Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÈñãÂßã');

        // „Çµ„É≥„Éó„É´„Éá„Éº„Çø„Åæ„Åü„ÅØÊó¢Â≠ò„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø
        await loadPrompts();
        console.log('‚úÖ „Çπ„ÉÜ„ÉÉ„Éó2ÂÆå‰∫Ü: „Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÊàêÂäü');

        console.log('üîÑ „Çπ„ÉÜ„ÉÉ„Éó3: UIÊõ¥Êñ∞ÈñãÂßã');
        // UIÊõ¥Êñ∞
        updateTagList();
        console.log('‚úÖ „Çπ„ÉÜ„ÉÉ„Éó3-1ÂÆå‰∫Ü: „Çø„Ç∞„É™„Çπ„ÉàÊõ¥Êñ∞');

        renderPrompts();
        console.log('‚úÖ „Çπ„ÉÜ„ÉÉ„Éó3-2ÂÆå‰∫Ü: „Éó„É≠„É≥„Éó„ÉàÊèèÁîª');

        updateCounts();
        console.log('‚úÖ „Çπ„ÉÜ„ÉÉ„Éó3-3ÂÆå‰∫Ü: „Ç´„Ç¶„É≥„ÉàÊõ¥Êñ∞');

        showLoading(false);
        console.log('‚úÖ ÂàùÊúüÂåñÂÆåÂÖ®ÊàêÂäü');

    } catch (error) {
        console.error('üí• initializeAppÂÜÖÈÉ®„Ç®„É©„Éº:', error);
        showLoading(false);
        throw error; // „Ç®„É©„Éº„Çí‰∏ä‰Ωç„Å´ÂÜç„Çπ„É≠„Éº
    }
}

// ========================================================================== 
// „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
// ========================================================================== 

function setupEventListeners() {
    // „Éò„ÉÉ„ÉÄ„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥
    document.getElementById('add-prompt-btn').addEventListener('click', () => showAddModal());
    document.getElementById('download-btn').addEventListener('click', downloadJSON);
    document.getElementById('github-settings-btn').addEventListener('click', showGitHubSettingsModal);
    document.getElementById('search-input').addEventListener('input', handleSearch);
    
    // „Çµ„Ç§„Éâ„Éê„Éº
    document.getElementById('clear-filter-btn').addEventListener('click', clearFilter);
    document.getElementById('add-tag-btn').addEventListener('click', addNewTag);
    
    // „ÇΩ„Éº„Éà
    document.getElementById('sort-select').addEventListener('change', handleSort);
    
    // „É¢„Éº„ÉÄ„É´ - „Éó„É≠„É≥„Éó„ÉàËøΩÂä†/Á∑®ÈõÜ
    document.getElementById('modal-close').addEventListener('click', closeModal);
    document.getElementById('cancel-btn').addEventListener('click', closeModal);
    document.getElementById('prompt-form').addEventListener('submit', handleSubmit);
    document.getElementById('prompt-tags').addEventListener('input', handleTagInput);
    
    // „É¢„Éº„ÉÄ„É´ - Ë©≥Á¥∞Ë°®Á§∫
    document.getElementById('detail-close').addEventListener('click', closeDetailModal);
    // Ê≥®ÊÑè: detail-edit-btn, detail-delete-btn, detail-select-btn„ÅØ
    // showDetailModal()ÂÜÖ„ÅßÂãïÁöÑ„Å´„Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº„ÇíË®≠ÂÆö
    
    // „É¢„Éº„ÉÄ„É´ - ÂâäÈô§Á¢∫Ë™ç
    document.getElementById('delete-close').addEventListener('click', closeDeleteModal);
    document.getElementById('delete-cancel').addEventListener('click', closeDeleteModal);
    document.getElementById('delete-confirm').addEventListener('click', confirmDelete);
    
    // „É¢„Éº„ÉÄ„É´Â§ñ„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„Çã
    document.getElementById('prompt-modal').addEventListener('click', (e) => {
        if (e.target === e.currentTarget) closeModal();
    });
    document.getElementById('detail-modal').addEventListener('click', (e) => {
        if (e.target === e.currentTarget) closeDetailModal();
    });
    document.getElementById('delete-modal').addEventListener('click', (e) => {
        if (e.target === e.currentTarget) closeDeleteModal();
    });
    
    // „Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà
    document.addEventListener('keydown', handleKeyboard);

    // GitHubË®≠ÂÆö„É¢„Éº„ÉÄ„É´
    document.getElementById('github-settings-close').addEventListener('click', hideGitHubSettingsModal);
    document.getElementById('github-cancel-btn').addEventListener('click', hideGitHubSettingsModal);
    document.getElementById('github-save-btn').addEventListener('click', saveGitHubToken);
    document.getElementById('test-github-connection').addEventListener('click', testGitHubConnectionFromModal);

    // GitHubË®≠ÂÆö„É¢„Éº„ÉÄ„É´„ÅÆËÉåÊôØ„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„Çã
    document.getElementById('github-settings-modal').addEventListener('click', (e) => {
        if (e.target === e.currentTarget) {
            hideGitHubSettingsModal();
        }
    });
}

// ========================================================================== 
// „Éá„Éº„ÇøÁÆ°ÁêÜ
// ========================================================================== 

async function loadPrompts() {
    try {
        console.log('üìä „Éó„É≠„É≥„Éó„Éà„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÈñãÂßã');
        
        // 1. ÊúÄÂÑ™ÂÖà: prompts.json„Éï„Ç°„Ç§„É´„Åã„ÇâË™≠„ÅøËæº„ÅøÔºàv7.0.0ÂØæÂøúÔºâ
        console.log('üîÑ prompts.json„Åã„ÇâË™≠„ÅøËæº„Åø‰∏≠...');
        try {
            const response = await fetch('./prompts.json');
            if (response.ok) {
                const data = await response.json();
                if (data.prompts && Array.isArray(data.prompts)) {
                    prompts = data.prompts;
                    console.log('‚úÖ prompts.jsonË™≠„ÅøËæº„ÅøÊàêÂäü:', prompts.length, 'ÂÄã„ÅÆ„Éó„É≠„É≥„Éó„Éà');
                    console.log('‚úÖ ÊúÄÂàù„ÅÆ„Éó„É≠„É≥„Éó„Éà:', prompts[0]?.title);
                    updateAllTags();
                    return;
                }
            }
        } catch (jsonError) {
            console.warn('‚ö†Ô∏è prompts.jsonË™≠„ÅøËæº„ÅøÂ§±Êïó:', jsonError);
        }
        
        // 2. „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Êó¢„Å´prompts.json„Åã„ÇâË™≠„ÅøËæº„ÅøÊ∏à„Åø„ÅÆ„Åü„ÇÅ„Çπ„Ç≠„ÉÉ„Éó

        // 3. „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏
        console.log('üìÅ „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâË™≠„ÅøËæº„Åø');
        const savedData = localStorage.getItem('promptsData');
        if (savedData) {
            const data = JSON.parse(savedData);
            prompts = data.prompts || [];
            console.log('üìÅ „É≠„Éº„Ç´„É´„Éá„Éº„ÇøË™≠„ÅøËæº„Åø:', prompts.length, 'ÂÄã„ÅÆ„Éó„É≠„É≥„Éó„Éà');
        } else {
            prompts = [];
            console.log('üìÅ „Éá„Éº„Çø„Å™„Åó„ÄÅÁ©∫„ÅÆÈÖçÂàó„ÅßÂàùÊúüÂåñ');
        }

        updateAllTags();
        
    } catch (error) {
        console.error('„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error);
        prompts = [];
        updateAllTags();
    }
}

async function savePrompts() {
    try {
        const data = {
            version: '6.0.0',
            lastUpdated: new Date().toISOString(),
            prompts: prompts
        };
        
        localStorage.setItem('promptsData', JSON.stringify(data));
        console.log('„Éá„Éº„Çø‰øùÂ≠òÂÆå‰∫Ü');
        
        return true;
    } catch (error) {
        console.error('„Éá„Éº„Çø‰øùÂ≠ò„Ç®„É©„Éº:', error);
        showNotification('„Éá„Éº„Çø„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', 'error');
        return false;
    }
}

function createSampleData() {
    // „Çµ„É≥„Éó„É´„Éá„Éº„Çø„ÇíÁ©∫„Å´„Åó„Å¶„ÄÅGoogle Sheets„ÅÆ„Åø„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó
    return [];
}

function updateAllTags() {
    allTags.clear();
    
    // prompts„ÅåÈÖçÂàó„Åß„Å™„ÅÑÂ†¥Âêà„ÅÆÂÆâÂÖ®Âá¶ÁêÜ
    if (!Array.isArray(prompts)) {
        console.error('prompts„ÅåÈÖçÂàó„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì:', typeof prompts, prompts);
        prompts = [];
        return;
    }
    
    prompts.forEach(prompt => {
        if (prompt && prompt.tags) {
            // tags„ÅåÊñáÂ≠óÂàó„ÅÆÂ†¥Âêà„ÅØ„Ç´„É≥„ÉûÂå∫Âàá„Çä„ÅßÂàÜÂâ≤
            if (typeof prompt.tags === 'string') {
                const tagArray = prompt.tags.split(',').map(tag => tag.trim()).filter(tag => tag);
                tagArray.forEach(tag => allTags.add(tag));
            } else if (Array.isArray(prompt.tags)) {
                prompt.tags.forEach(tag => allTags.add(tag));
            }
        }
    });
}

// ========================================================================== 
// UIÊõ¥Êñ∞
// ========================================================================== 

function updateTagList() {
    const tagList = document.getElementById('tag-list');
    const existingAll = tagList.querySelector('[data-tag="all"]');
    
    // „Åô„Åπ„Å¶‰ª•Â§ñ„Çí„ÇØ„É™„Ç¢
    tagList.innerHTML = '';
    tagList.appendChild(existingAll);
    
    // „Çø„Ç∞„Åî„Å®„ÅÆ„Ç´„Ç¶„É≥„Éà„ÇíË®àÁÆó
    const tagCounts = {};
    prompts.forEach(prompt => {
        if (prompt.tags) { // prompt.tags „ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
            let tagsToProcess = [];
            if (typeof prompt.tags === 'string') {
                tagsToProcess = prompt.tags.split(',').map(tag => tag.trim()).filter(tag => tag !== '');
            } else if (Array.isArray(prompt.tags)) {
                tagsToProcess = prompt.tags;
            }

            tagsToProcess.forEach(tag => {
                tagCounts[tag] = (tagCounts[tag] || 0) + 1;
            });
        }
    });
    
    // „Çø„Ç∞„ÇíËøΩÂä†
    Array.from(allTags).sort().forEach(tag => {
        const tagItem = document.createElement('div');
        tagItem.className = 'tag-item';
        tagItem.dataset.tag = tag;
        tagItem.innerHTML = `
            <span class="tag-name">${escapeHtml(tag)}</span>
            <span class="tag-count">${tagCounts[tag] || 0}</span>
        `;
        tagItem.addEventListener('click', () => filterByTag(tag));
        tagList.appendChild(tagItem);
    });
    
    // „Ç¢„ÇØ„ÉÜ„Ç£„ÉñÁä∂ÊÖã„ÇíÊõ¥Êñ∞
    updateActiveTag();
}

function updateActiveTag() {
    document.querySelectorAll('.tag-item').forEach(item => {
        item.classList.toggle('active', item.dataset.tag === currentFilter);
    });
}

function renderPrompts() {
    const grid = document.getElementById('prompt-grid');
    const emptyState = document.getElementById('empty-state');

    // prompts„ÅåÈÖçÂàó„Åß„Å™„ÅÑÂ†¥Âêà„ÅÆÂÆâÂÖ®Âá¶ÁêÜ
    if (!Array.isArray(prompts)) {
        console.error('renderPrompts: prompts„ÅåÈÖçÂàó„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì:', typeof prompts, prompts);
        prompts = [];
        grid.style.display = 'none';
        emptyState.style.display = 'block';
        return;
    }

    // „Éï„Ç£„É´„Çø„É™„É≥„Ç∞„Å®Ê§úÁ¥¢
    let filteredPrompts = prompts.filter(prompt => {
        // „Çø„Ç∞„Éï„Ç£„É´„Çø„Éº
        if (currentFilter !== 'all') {
            if (!prompt.tags) {
                return false;
            }
            
            let tagArray = [];
            if (typeof prompt.tags === 'string') {
                tagArray = prompt.tags.split(',').map(tag => tag.trim());
            } else if (Array.isArray(prompt.tags)) {
                tagArray = prompt.tags;
            }
            
            if (!tagArray.includes(currentFilter)) {
                return false;
            }
        }
        
        // Ê§úÁ¥¢„Éï„Ç£„É´„Çø„Éº
        if (searchQuery) {
            const query = searchQuery.toLowerCase();
            
            let tagArray = [];
            if (prompt.tags) {
                if (typeof prompt.tags === 'string') {
                    tagArray = prompt.tags.split(',').map(tag => tag.trim());
                } else if (Array.isArray(prompt.tags)) {
                    tagArray = prompt.tags;
                }
            }
            
            return (
                (prompt.title && prompt.title.toLowerCase().includes(query)) ||
                (prompt.prompt && prompt.prompt.toLowerCase().includes(query)) ||
                (prompt.memo && prompt.memo.toLowerCase().includes(query)) ||
                tagArray.some(tag => tag.toLowerCase().includes(query))
            );
        }
        
        return true;
    });

    // „ÇΩ„Éº„Éà
    const sortBy = document.getElementById('sort-select').value;
    filteredPrompts.sort((a, b) => {
        switch (sortBy) {
            case 'title':
                return a.title.localeCompare(b.title);
            case 'updated':
                return new Date(b.updatedAt) - new Date(a.updatedAt);
            case 'created':
            default:
                return new Date(b.createdAt) - new Date(a.createdAt);
        }
    });
    
    if (filteredPrompts.length === 0) {
        grid.style.display = 'none';
        emptyState.style.display = 'block';
        return;
    }
    
    grid.style.display = 'grid';
    emptyState.style.display = 'none';
    
    grid.innerHTML = filteredPrompts.map(prompt => `
        <div class="prompt-card" data-id="${prompt.id}">
            <div class="prompt-card-header">
                <h3 class="prompt-title">${escapeHtml(prompt.title)}</h3>
                <div class="prompt-actions">
                    <button class="action-btn" onclick="editPrompt(${prompt.id})" title="Á∑®ÈõÜ">
                        ‚úèÔ∏è
                    </button>
                    <button class="action-btn" onclick="showDeleteModal(${prompt.id})" title="ÂâäÈô§">
                        üóëÔ∏è
                    </button>
                </div>
            </div>
            
            <div class="prompt-preview">${escapeHtml(truncateText(prompt.prompt, 150))}</div>
            
            ${prompt.memo ? `<div class="prompt-memo">üí≠ ${escapeHtml(truncateText(prompt.memo, 100))}</div>` : ''}
            
            ${prompt.tags ? `
                <div class="prompt-tags">
                    ${(typeof prompt.tags === 'string' ? prompt.tags.split(',').map(tag => tag.trim()).filter(tag => tag !== '') : prompt.tags).map(tag => `<span class="tag-badge">${escapeHtml(tag)}</span>`).join('')}
                </div>
            ` : ''}
            
            <div class="prompt-footer">
                <span>‰ΩúÊàê: ${formatDate(prompt.createdAt)}</span>
                <button class="btn btn-primary" onclick="showDetailModal(${prompt.id})">
                    ÈÅ∏Êäû
                </button>
            </div>
        </div>
    `).join('');
}

function updateCounts() {
    const totalCount = prompts.length;
    const filteredCount = document.querySelectorAll('.prompt-card').length;
    
    document.getElementById('all-count').textContent = totalCount;
    document.getElementById('prompt-count').textContent = `${filteredCount}ÂÄã„ÅÆ„Éó„É≠„É≥„Éó„Éà`;
    
    // „Çø„Ç§„Éà„É´Êõ¥Êñ∞
    const titleElement = document.getElementById('content-title');
    if (currentFilter === 'all') {
        titleElement.textContent = '„Åô„Åπ„Å¶„ÅÆ„Éó„É≠„É≥„Éó„Éà';
    } else {
        titleElement.textContent = `„Çø„Ç∞: ${currentFilter}`;
    }
}

// ========================================================================== 
// „Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
// ========================================================================== 

function handleSearch(e) {
    searchQuery = e.target.value.trim();
    renderPrompts();
    updateCounts();
}

function handleSort(e) {
    renderPrompts();
    updateCounts();
}

function filterByTag(tag) {
    currentFilter = tag;
    updateActiveTag();
    renderPrompts();
    updateCounts();
}

function clearFilter() {
    currentFilter = 'all';
    document.getElementById('search-input').value = '';
    searchQuery = '';
    updateActiveTag();
    renderPrompts();
    updateCounts();
}

function handleTagInput(e) {
    const input = e.target.value;
    const suggestions = document.getElementById('tag-suggestions');
    
    if (input.length > 0) {
        const lastTag = input.split(',').pop().trim().toLowerCase();
        if (lastTag.length > 0) {
            const matchingTags = Array.from(allTags).filter(tag => 
                tag.toLowerCase().includes(lastTag) && 
                !input.toLowerCase().includes(tag.toLowerCase())
            );
            
            suggestions.innerHTML = matchingTags.slice(0, 5).map(tag => 
                `<span class="tag-suggestion" onclick="addSuggestedTag('${tag}')">${escapeHtml(tag)}</span>`
            ).join('');
        } else {
            suggestions.innerHTML = '';
        }
    } else {
        suggestions.innerHTML = '';
    }
}

function addSuggestedTag(tag) {
    const input = document.getElementById('prompt-tags');
    const currentTags = input.value.split(',').map(t => t.trim()).filter(t => t.length > 0);
    currentTags.pop(); // ÊúÄÂæå„ÅÆÈÉ®ÂàÜÁöÑ„Å™„Çø„Ç∞„ÇíÂâäÈô§
    currentTags.push(tag);
    input.value = currentTags.join(', ') + ', ';
    input.focus();
    document.getElementById('tag-suggestions').innerHTML = '';
}

async function handleSubmit(e) {
    e.preventDefault();

    const title = document.getElementById('prompt-title').value.trim();
    const content = document.getElementById('prompt-content').value.trim();
    const memo = document.getElementById('prompt-memo').value.trim();
    const tagsInput = document.getElementById('prompt-tags').value.trim();

    if (!title || !content) {
        showNotification('„Çø„Ç§„Éà„É´„Å®„Éó„É≠„É≥„Éó„Éà„ÅØÂøÖÈ†à„Åß„Åô', 'error');
        return;
    }

    const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0) : [];

    const promptData = {
        title,
        prompt: content,
        memo: memo || '',
        tags
    };

    try {
        if (currentEditId) {
            await updatePromptWithAutoSave(currentEditId, promptData);
        } else {
            await addPromptWithAutoSave(promptData);
        }
    } catch (error) {
        console.error('„Éó„É≠„É≥„Éó„ÉàÊìç‰Ωú„Ç®„É©„Éº:', error);
        showNotification(`Êìç‰Ωú„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`, 'error');
    }
}

function handleKeyboard(e) {
    // Esc„Ç≠„Éº„Åß„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
    if (e.key === 'Escape') {
        if (document.getElementById('prompt-modal').style.display !== 'none') {
            closeModal();
        } else if (document.getElementById('detail-modal').style.display !== 'none') {
            closeDetailModal();
        } else if (document.getElementById('delete-modal').style.display !== 'none') {
            closeDeleteModal();
        }
    }
    
    // Ctrl/Cmd + N „ÅßÊñ∞Ë¶è„Éó„É≠„É≥„Éó„Éà
    if ((e.ctrlKey || e.metaKey) && e.key === 'n') {
        e.preventDefault();
        showAddModal();
    }
    
    // Ctrl/Cmd + F „ÅßÊ§úÁ¥¢„Éï„Ç©„Éº„Ç´„Çπ
    if ((e.ctrlKey || e.metaKey) && e.key === 'f') {
        e.preventDefault();
        document.getElementById('search-input').focus();
    }
}

// ========================================================================== 
// CRUDÊìç‰Ωú
// ========================================================================== 

async function addPrompt(data) {
    const newPrompt = {
        id: generateId(),
        ...data,
        createdAt: getCurrentTimestamp(),
        updatedAt: getCurrentTimestamp()
    };

    prompts.unshift(newPrompt);
    updateAllTags();
    await savePrompts();

    closeModal();
    updateTagList();
    renderPrompts();
    updateCounts();

    showNotification('„Éó„É≠„É≥„Éó„Éà„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü', 'success');
    return newPrompt;
}

async function updatePrompt(id, data) {
    const index = prompts.findIndex(p => p.id === id);
    if (index === -1) return;

    prompts[index] = {
        ...prompts[index],
        ...data,
        updatedAt: getCurrentTimestamp()
    };

    updateAllTags();
    await savePrompts();

    closeModal();
    updateTagList();
    renderPrompts();
    updateCounts();

    showNotification('„Éó„É≠„É≥„Éó„Éà„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü', 'success');
    return prompts[index];
}

async function deletePrompt(id) {
    const index = prompts.findIndex(p => p.id === id);
    if (index === -1) return;

    const deletedPrompt = prompts[index];
    prompts.splice(index, 1);
    updateAllTags();
    await savePrompts();

    closeDeleteModal();
    updateTagList();
    renderPrompts();
    updateCounts();

    showNotification('„Éó„É≠„É≥„Éó„Éà„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü', 'success');
    return deletedPrompt;
}

// ========================================================================== 
// „É¢„Éº„ÉÄ„É´Êìç‰Ωú
// ========================================================================== 

function showAddModal() {
    currentEditId = null;
    document.getElementById('modal-title').textContent = '„Éó„É≠„É≥„Éó„ÉàËøΩÂä†';
    document.getElementById('prompt-form').reset();
    document.getElementById('tag-suggestions').innerHTML = '';
    document.getElementById('prompt-modal').style.display = 'flex';
    setTimeout(() => document.getElementById('prompt-title').focus(), 100);
}

function editPrompt(id) {
    const prompt = prompts.find(p => p.id === id);
    if (!prompt) return;
    
    currentEditId = id;
    document.getElementById('modal-title').textContent = '„Éó„É≠„É≥„Éó„ÉàÁ∑®ÈõÜ';
    document.getElementById('prompt-title').value = prompt.title;
    document.getElementById('prompt-content').value = prompt.prompt;
    document.getElementById('prompt-memo').value = prompt.memo || '';
    document.getElementById('prompt-tags').value = prompt.tags ? prompt.tags.join(', ') : '';
    document.getElementById('tag-suggestions').innerHTML = '';
    document.getElementById('prompt-modal').style.display = 'flex';
    setTimeout(() => document.getElementById('prompt-title').focus(), 100);
}

function closeModal() {
    document.getElementById('prompt-modal').style.display = 'none';
    currentEditId = null;
}

function showDetailModal(id) {
    const prompt = prompts.find(p => p.id === id);
    if (!prompt) return;
    
    document.getElementById('detail-title').textContent = prompt.title;
    document.getElementById('detail-prompt').textContent = prompt.prompt;
    
    const memoSection = document.getElementById('detail-memo-section');
    if (prompt.memo) {
        document.getElementById('detail-memo').textContent = prompt.memo;
        memoSection.style.display = 'block';
    } else {
        memoSection.style.display = 'none';
    }
    
    const tagsContainer = document.getElementById('detail-tags');
    if (prompt.tags && prompt.tags.length > 0) {
        tagsContainer.innerHTML = prompt.tags.map(tag => 
            `<span class="tag-badge">${escapeHtml(tag)}</span>`
        ).join('');
    } else {
        tagsContainer.innerHTML = '<span style="color: var(--text-muted);">„Çø„Ç∞„Å™„Åó</span>';
    }
    
    // „Éú„Çø„É≥„Å´ID„ÇíË®≠ÂÆöÔºà„Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞‰ªò„ÅçÔºâ
    console.log('üîßüîßüîß „É¢„Éº„ÉÄ„É´„Éú„Çø„É≥Ë®≠ÂÆö‰∏≠ ID:', id);

    // Êó¢Â≠ò„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„Çí„ÇØ„É™„Ç¢
    const editBtn = document.getElementById('detail-edit-btn');
    const deleteBtn = document.getElementById('detail-delete-btn');
    const selectBtn = document.getElementById('detail-select-btn');

    console.log('üîßüîßüîß „Éú„Çø„É≥Ë¶ÅÁ¥†Á¢∫Ë™ç:', {
        editBtn: !!editBtn,
        deleteBtn: !!deleteBtn,
        selectBtn: !!selectBtn,
        selectBtnText: selectBtn?.textContent
    });

    // Êñ∞„Åó„ÅÑ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆöÔºà„ÇØ„É≠„Éº„É≥„Åó„Å¶Âè§„ÅÑ„É™„Çπ„Éä„Éº„ÇíÂâäÈô§Ôºâ
    const newEditBtn = editBtn.cloneNode(true);
    editBtn.parentNode.replaceChild(newEditBtn, editBtn);
    newEditBtn.addEventListener('click', () => {
        closeDetailModal();
        editPrompt(id);
    });

    const newDeleteBtn = deleteBtn.cloneNode(true);
    deleteBtn.parentNode.replaceChild(newDeleteBtn, deleteBtn);
    newDeleteBtn.addEventListener('click', () => showDeleteModal(id));

    const newSelectBtn = selectBtn.cloneNode(true);
    selectBtn.parentNode.replaceChild(newSelectBtn, selectBtn);
    newSelectBtn.addEventListener('click', () => {
        console.log('üî•üî•üî• ÈÅ∏Êäû„Éú„Çø„É≥„Åå„ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åæ„Åó„Åü! ID:', id);
        console.log('üî•üî•üî• „Åì„Çå„Åã„ÇâselectPromptÈñ¢Êï∞„ÇíÂëº„Å≥Âá∫„Åó„Åæ„Åô');

        // Á¢∫ÂÆü„Å´Èñ¢Êï∞„ÅåÂëº„Å∞„Çå„Çã„Çà„ÅÜ„Å´try-catch„ÅßÂõ≤„ÇÄ
        try {
            selectPrompt(id);
            console.log('üî•üî•üî• selectPromptÈñ¢Êï∞Âëº„Å≥Âá∫„ÅóÂÆå‰∫Ü');
        } catch (error) {
            console.error('üî•üî•üî• selectPromptÈñ¢Êï∞Âëº„Å≥Âá∫„Åó„Ç®„É©„Éº:', error);
        }
    });

    console.log('üîß ÈÅ∏Êäû„Éú„Çø„É≥Ë®≠ÂÆöÂÆå‰∫Ü:', newSelectBtn);
    
    document.getElementById('detail-modal').style.display = 'flex';
}

function closeDetailModal() {
    const detailModal = document.getElementById('detail-modal');
    if (detailModal) {
        detailModal.style.display = 'none';
    }
}

function showDeleteModal(id) {
    const prompt = prompts.find(p => p.id === id);
    if (!prompt) return;
    
    document.getElementById('delete-prompt-title').textContent = prompt.title;
    document.getElementById('delete-confirm').onclick = () => deletePrompt(id);
    document.getElementById('delete-modal').style.display = 'flex';
}

function closeDeleteModal() {
    document.getElementById('delete-modal').style.display = 'none';
}

// ========================================================================== 
// ChromeÊã°ÂºµÊ©üËÉΩÈÄ£Êê∫
// ========================================================================== 

// Á∑äÊÄ•‰øÆÊ≠£: JavaScriptÂÆüË°å„Ç®„É©„ÉºÂØæÁ≠ñ
(function() {
    'use strict';

    console.log('üõ°Ô∏è JavaScript „Ç®„É©„ÉºÂØæÁ≠ñ„ÇíÂàùÊúüÂåñ');

    // Clipboard API „ÅÆÂÆâÂÖ®„Å™Âëº„Å≥Âá∫„ÅóÁî®„Éò„É´„Éë„Éº
    window.safeClipboardWrite = function(text) {
        try {
            if (navigator.clipboard && navigator.clipboard.writeText) {
                return navigator.clipboard.writeText(text).catch(error => {
                    console.warn('Clipboard API failed:', error);
                    return fallbackCopy(text);
                });
            } else {
                return fallbackCopy(text);
            }
        } catch (error) {
            console.warn('Clipboard API not available:', error);
            return fallbackCopy(text);
        }
    };

    function fallbackCopy(text) {
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „ÉÜ„Ç≠„Çπ„Éà„Ç®„É™„Ç¢‰ΩúÊàêÊñπÂºè
        try {
            const textarea = document.createElement('textarea');
            textarea.value = text;
            document.body.appendChild(textarea);
            textarea.select();
            document.execCommand('copy');
            document.body.removeChild(textarea);
            return Promise.resolve();
        } catch (error) {
            console.error('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Ç≥„Éî„Éº„ÇÇÂ§±Êïó:', error);
            return Promise.reject(error);
        }
    }

    console.log('üõ°Ô∏è JavaScript „Ç®„É©„ÉºÂØæÁ≠ñÂÆå‰∫Ü');
})();

function selectPrompt(id) {
    // Èñ¢Êï∞„ÅÆÈñãÂßã„ÇíÊúÄÂàù„Å´„É≠„Ç∞Âá∫ÂäõÔºàconsole.clear„Çà„ÇäÂâçÔºâ
    console.clear(); // „Éá„Éê„ÉÉ„Ç∞Áî®Ôºö„Ç≥„É≥„ÇΩ„Éº„É´„Çí„ÇØ„É™„Ç¢
    console.log('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà');
    console.log('üöÄüöÄüöÄ selectPromptÈñ¢Êï∞„ÅåÂëº„Å≥Âá∫„Åï„Çå„Åæ„Åó„Åü! ID:', id);
    console.log('üî•üî•üî• „Åì„Çå„ÅåË°®Á§∫„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÄÅÈñ¢Êï∞„ÅåÂëº„Å∞„Çå„Å¶„ÅÑ„Åæ„Åõ„ÇìÔºÅ');
    console.log('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà');
    console.log('üîç ÂºïÊï∞„ÉÅ„Çß„ÉÉ„ÇØ:', {
        id: id,
        idType: typeof id,
        timestamp: new Date().toISOString()
    });

    const prompt = prompts.find(p => p.id === id);
    if (!prompt) {
        console.error('‚ùå „Éó„É≠„É≥„Éó„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', id, 'prompts:', prompts);
        return;
    }
    console.log('üöÄ ==> „Éó„É≠„É≥„Éó„ÉàÈÅ∏ÊäûÈñãÂßã:', prompt.title);
    console.log('üöÄ ==> „Éó„É≠„É≥„Éó„ÉàID:', id);
    console.log('üöÄ ==> ÁèæÂú®„ÅÆ„Éó„É≠„É≥„Éó„Éà‰∏ÄË¶ß:', prompts.length, 'ÂÄã');

    // iframeÁí∞Â¢É„ÅÆË©≥Á¥∞„ÉÅ„Çß„ÉÉ„ÇØ
    const isInIframe = window.parent && window.parent !== window;
    const isInExtension = window.location !== window.parent.location;

    console.log('üîç Áí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØ ÈñãÂßã ====================');
    console.log('üîç window.parent:', window.parent);
    console.log('üîç window.parent !== window:', window.parent !== window);
    console.log('üîç isInIframe:', isInIframe);
    console.log('üîç isInExtension:', isInExtension);
    console.log('üîç currentLocation:', window.location.href);

    if (window.parent && window.parent !== window) {
        console.log('‚úÖ iframeÁí∞Â¢É„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
        console.log('üéØ ChromeÊã°ÂºµÊ©üËÉΩÈÄö‰ø°„ÇíÂÆüË°å„Åó„Åæ„Åô');
    } else {
        console.log('‚ùå iframeÁí∞Â¢É„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì');
        console.log('üéØ „Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥Âá¶ÁêÜ„ÇíÂÆüË°å„Åó„Åæ„Åô');
    }
    console.log('üîç Áí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØ ÁµÇ‰∫Ü ====================');

    // iframe„Åã„ÇâË¶™„Ç¶„Ç£„É≥„Éâ„Ç¶ÔºàChromeÊã°ÂºµÊ©üËÉΩÔºâ„Å∏„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
    if (isInIframe) {
        console.log('üöÄ iframeÁí∞Â¢ÉÊ§úÂá∫: window.parent„Å´„Éó„É≠„É≥„Éó„Éà„ÇíÈÄÅ‰ø°');
        console.log('üöÄ parent:', window.parent);

        const messageData = {
            type: 'INSERT_PROMPT',
            prompt: prompt.prompt,
            title: prompt.title,
            id: prompt.id,
            source: 'github_pages_iframe'
        };

        console.log('üöÄ ÈÄÅ‰ø°„Éá„Éº„Çø:', {
            ...messageData,
            prompt: messageData.prompt.substring(0, 100) + '...'
        });

        try {
            window.parent.postMessage(messageData, '*');
            console.log('üöÄ postMessageÈÄÅ‰ø°ÂÆå‰∫Ü');

            // iframeÂÜÖ„Åß„ÅØÈÄöÁü•Ë°®Á§∫„ÅÆ„ÅøÔºàË¶™„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅßÂá¶ÁêÜ„Åï„Çå„ÇãÔºâ
            showNotification('„Éó„É≠„É≥„Éó„Éà„ÇíËá™ÂãïÊåøÂÖ•‰∏≠...', 'info');
            return;
        } catch (error) {
            console.error('üöÄ postMessageÈÄÅ‰ø°„Ç®„É©„Éº:', error);
        }
    }

    // Âà•„Çø„Éñ„ÅßÈñã„ÅÑ„ÅüÂ†¥ÂêàÔºàwindow.openerÔºâ
    if (window.opener && !window.opener.closed) {
        console.log('Âà•„Çø„Éñ: window.opener„Å´„Éó„É≠„É≥„Éó„Éà„ÇíÈÄÅ‰ø°');
        window.opener.postMessage({
            type: 'PROMPT_SELECTED',
            prompt: prompt.prompt,
            title: prompt.title,
            id: prompt.id
        }, '*');

        showNotification('„Éó„É≠„É≥„Éó„Éà„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü', 'success');

        // 2ÁßíÂæå„Å´„Ç¶„Ç£„É≥„Éâ„Ç¶„ÇíÈñâ„Åò„Çã
        setTimeout(() => {
            window.close();
        }, 2000);
        return;
    }

    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜÔºàiframeÈÄö‰ø°„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÅÆ„ÅøÔºâ
    console.log('üîÑ „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: iframeÈÄö‰ø°„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü');

    // iframeÁí∞Â¢É: ChromeÊã°ÂºµÊ©üËÉΩ„Å´Áõ¥Êé•ÈÄö‰ø°„ÇíÈÄÅ‰ø°
    if (isInIframe) {
        console.log('üîÑ iframeÁí∞Â¢É: ChromeÊã°ÂºµÊ©üËÉΩ„Å∏„ÅÆÈÄö‰ø°„ÇíË©¶Ë°å');

        // Êã°ÂºµÊ©üËÉΩ„Å∏„ÅÆË©≥Á¥∞„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°
        const message = {
            type: 'INSERT_PROMPT',
            prompt: prompt.prompt,
            title: prompt.title,
            source: 'github_pages_iframe'
        };

        console.log('üì® Êã°ÂºµÊ©üËÉΩ„Å∏„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°:', message);

        try {
            // Ë§áÊï∞„ÅÆÈÄö‰ø°ÊñπÊ≥ï„ÇíË©¶Ë°å
            if (window.parent && window.parent.postMessage) {
                window.parent.postMessage(message, '*');
                console.log('‚úÖ window.parent.postMessage ÈÄÅ‰ø°ÂÆå‰∫Ü');
            }

            if (window.top && window.top.postMessage) {
                window.top.postMessage(message, '*');
                console.log('‚úÖ window.top.postMessage ÈÄÅ‰ø°ÂÆå‰∫Ü');
            }

            showNotification('„Éó„É≠„É≥„Éó„Éà„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü', 'success');

            // ÊàêÂäüÊôÇ„ÅØ„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
            setTimeout(() => {
                document.getElementById('detail-modal').style.display = 'none';
            }, 1000);

        } catch (error) {
            console.error('‚ùå iframeÈÄö‰ø°„Ç®„É©„Éº:', error);
            showNotification('„Éó„É≠„É≥„Éó„ÉàÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', 'error');
        }

        return; // iframeÁí∞Â¢É„Åß„ÅØ„Åì„Åì„ÅßÁµÇ‰∫Ü
    }

    // „Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥Áí∞Â¢É„ÅÆÂ†¥Âêà„ÅÆ„Åø„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Ç≥„Éî„Éº
    console.log('üîÑ „Çπ„Çø„É≥„Éâ„Ç¢„É≠„É≥Áí∞Â¢É: „ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Ç≥„Éî„Éº„ÇíÂÆüË°å');
    showNotification('„Éó„É≠„É≥„Éó„Éà„Çí„ÇØ„É™„ÉÉ„Éó„Éú„Éº„Éâ„Å´„Ç≥„Éî„Éº„Åó„Åæ„Åó„Åü', 'success');
}

// ========================================================================== 
// „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
// ========================================================================== 

function generateId() {
    return Date.now() + Math.random();
}

function getCurrentTimestamp() {
    return new Date().toISOString();
}

function downloadJSON() {
    const data = {
        version: '6.0.0',
        lastUpdated: getCurrentTimestamp(),
        prompts: prompts
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `prompts_${formatDateForFilename()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showNotification('JSON„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Åæ„Åó„Åü', 'success');
}

function addNewTag() {
    const tagName = prompt('Êñ∞„Åó„ÅÑ„Çø„Ç∞Âêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:');
    if (tagName && tagName.trim()) {
        const trimmedTag = tagName.trim();
        if (!allTags.has(trimmedTag)) {
            allTags.add(trimmedTag);
            updateTagList();
            filterByTag(trimmedTag);
        } else {
            showNotification('„Åù„ÅÆ„Çø„Ç∞„ÅØÊó¢„Å´Â≠òÂú®„Åó„Åæ„Åô', 'warning');
        }
    }
}

function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    const icon = document.getElementById('notification-icon');
    const messageEl = document.getElementById('notification-message');
    
    // „Ç¢„Ç§„Ç≥„É≥„Å®„Çπ„Çø„Ç§„É´„ÇíË®≠ÂÆö
    notification.className = `notification ${type}`;
    switch (type) {
        case 'success':
            icon.textContent = '‚úì';
            break;
        case 'error':
            icon.textContent = '‚úó';
            break;
        case 'warning':
            icon.textContent = '‚ö†';
            break;
        default:
            icon.textContent = '‚Ñπ';
    }
    
    messageEl.textContent = message;
    notification.style.display = 'block';
    
    // 3ÁßíÂæå„Å´ÈùûË°®Á§∫
    setTimeout(() => {
        notification.style.display = 'none';
    }, 3000);
}

function showLoading(show) {
    document.getElementById('loading').style.display = show ? 'flex' : 'none';
}

function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ja-JP', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
}

function formatDateForFilename() {
    return getCurrentTimestamp().split('T')[0].replace(/-/g, '');
}

// ========================================================================== 
// „Éá„Éê„ÉÉ„Ç∞Áî®
// ========================================================================== 

// ========================================================================== 
// Ë©≥Á¥∞„É¢„Éº„ÉÄ„É´Èñ¢ÈÄ£Èñ¢Êï∞
// ========================================================================== 

function editFromDetail() {
    if (currentEditId) {
        closeDetailModal();
        showEditModal(currentEditId);
    }
}

function deleteFromDetail() {
    if (currentEditId) {
        closeDetailModal();
        if (confirm('„Åì„ÅÆ„Éó„É≠„É≥„Éó„Éà„ÇíÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü')) {
            deletePrompt(currentEditId);
        }
    }
}

function closeDetailModal() {
    const detailModal = document.getElementById('detail-modal');
    if (detailModal) {
        detailModal.style.display = 'none';
    }
}

// showEditModalÈñ¢Êï∞ÔºàeditFromDetail„Åß‰ΩøÁî®Ôºâ
function showEditModal(id) {
    editPrompt(id);
}

// confirmDeleteÈñ¢Êï∞ÔºàÂâäÈô§Á¢∫Ë™ç„É¢„Éº„ÉÄ„É´„Åß‰ΩøÁî®Ôºâ
function confirmDelete() {
    // onclick „ÅßË®≠ÂÆö„Åï„Çå„Åü deletePrompt Èñ¢Êï∞„ÅåÂëº„Å∞„Çå„Çã„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
    // ÂÆüÈöõ„ÅÆÂâäÈô§Âá¶ÁêÜ„ÅØ showDeleteModal „ÅßË®≠ÂÆö„Åï„Çå„Çã
}

// ==========================================================================
// GitHub APIÈÄ£Êê∫„ÇØ„É©„Çπ
// ==========================================================================

class GitHubConnector {
    constructor(owner, repo, branch = 'main') {
        this.owner = owner;
        this.repo = repo;
        this.branch = branch;
        this.filePath = 'prompts.json';
        this.apiBase = 'https://api.github.com';
        this.token = null;
        this.debounceTimer = null;
    }

    async initialize() {
        // „Éà„Éº„ÇØ„É≥„ÇíÂèñÂæóÔºàChromeÊã°ÂºµÊ©üËÉΩ„Åæ„Åü„ÅØLocalStorageÔºâ
        try {
            // ChromeÊã°ÂºµÊ©üËÉΩÁí∞Â¢É
            if (typeof chrome !== 'undefined' && chrome.storage) {
                const result = await chrome.storage.local.get(['githubToken']);
                this.token = result.githubToken;
            } else {
                // GitHub PagesÁí∞Â¢ÉÔºà„Éñ„É©„Ç¶„Ç∂Ôºâ
                this.token = localStorage.getItem('githubToken');
            }

            if (!this.token) {
                console.warn('GitHub Personal Access Token „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
                return { success: false, error: '„Éà„Éº„ÇØ„É≥Êú™Ë®≠ÂÆö' };
            }
            console.log('‚úÖ GitHub API ÂàùÊúüÂåñÂÆå‰∫Ü');
            return { success: true };
        } catch (error) {
            console.error('‚ùå GitHub API ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
            return { success: false, error: error.message };
        }
    }

    async getCurrentFileSha() {
        try {
            const response = await fetch(
                `${this.apiBase}/repos/${this.owner}/${this.repo}/contents/${this.filePath}?ref=${this.branch}`,
                {
                    headers: {
                        'Authorization': `token ${this.token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                }
            );

            if (response.ok) {
                const data = await response.json();
                return data.sha;
            } else if (response.status === 404) {
                // „Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØÊñ∞Ë¶è‰ΩúÊàê
                return null;
            } else {
                throw new Error(`GitHub API „Ç®„É©„Éº: ${response.status}`);
            }
        } catch (error) {
            console.error('‚ùå GitHub SHAÂèñÂæó„Ç®„É©„Éº:', error);
            throw error;
        }
    }

    async updatePromptsFile(promptsData) {
        try {
            if (!this.token) {
                await this.initialize();
            }

            const sha = await this.getCurrentFileSha();
            const content = btoa(JSON.stringify(promptsData, null, 2)); // Base64„Ç®„É≥„Ç≥„Éº„Éâ

            const requestBody = {
                message: 'ü§ñ Auto-save: „Éó„É≠„É≥„Éó„Éà„Éá„Éº„ÇøÊõ¥Êñ∞',
                content: content,
                branch: this.branch
            };

            if (sha) {
                requestBody.sha = sha;
            }

            const response = await fetch(
                `${this.apiBase}/repos/${this.owner}/${this.repo}/contents/${this.filePath}`,
                {
                    method: 'PUT',
                    headers: {
                        'Authorization': `token ${this.token}`,
                        'Accept': 'application/vnd.github.v3+json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestBody)
                }
            );

            if (response.ok) {
                const result = await response.json();
                console.log('‚úÖ GitHub API ‰øùÂ≠òÊàêÂäü:', result.commit.sha);
                return { success: true, sha: result.commit.sha };
            } else {
                const error = await response.json();
                throw new Error(`GitHub API „Ç®„É©„Éº: ${error.message}`);
            }

        } catch (error) {
            console.error('‚ùå GitHub API ‰øùÂ≠ò„Ç®„É©„Éº:', error);
            throw error;
        }
    }

    // DebounceÂá¶ÁêÜ‰ªò„Åç„ÅÆËá™Âãï‰øùÂ≠ò
    async autoSave(promptsData) {
        // ÈÄ£Á∂öÁ∑®ÈõÜÊôÇ„ÅÆAPIÂëº„Å≥Âá∫„ÅóÊúÄÂ∞èÂåñ
        clearTimeout(this.debounceTimer);

        this.debounceTimer = setTimeout(async () => {
            try {
                await this.updatePromptsFile(promptsData);
                showNotification('‚úÖ Ëá™Âãï‰øùÂ≠òÂÆå‰∫Ü', 'success');
                githubSettings.lastSyncTime = new Date().toISOString();
            } catch (error) {
                console.error('Ëá™Âãï‰øùÂ≠ò„Ç®„É©„Éº:', error);
                showNotification(`‚ö†Ô∏è Ëá™Âãï‰øùÂ≠òÂ§±Êïó: ${error.message}`, 'error');
            }
        }, 1000); // 1ÁßíÈñìÁ∑®ÈõÜ„Å™„Åó„Åß‰øùÂ≠òÂÆüË°å
    }

    async testConnection() {
        try {
            const response = await fetch(
                `${this.apiBase}/repos/${this.owner}/${this.repo}`,
                {
                    headers: {
                        'Authorization': `token ${this.token}`,
                        'Accept': 'application/vnd.github.v3+json'
                    }
                }
            );

            if (response.ok) {
                console.log('‚úÖ GitHub API Êé•Á∂ö„ÉÜ„Çπ„ÉàÊàêÂäü');
                return { success: true, message: 'GitHubÊé•Á∂öÊàêÂäü' };
            } else {
                throw new Error(`GitHub API „Ç®„É©„Éº: ${response.status}`);
            }
        } catch (error) {
            console.error('‚ùå GitHub API Êé•Á∂ö„ÉÜ„Çπ„ÉàÂ§±Êïó:', error);
            return { success: false, error: error.message };
        }
    }
}

// ==========================================================================
// GitHub APIÁÆ°ÁêÜÈñ¢Êï∞
// ==========================================================================

async function initializeGitHubConnection() {
    try {
        githubConnector = new GitHubConnector(
            githubSettings.owner,
            githubSettings.repo,
            githubSettings.branch
        );

        const result = await githubConnector.initialize();
        if (result.success) {
            console.log('‚úÖ GitHub APIÈÄ£Êê∫ÂàùÊúüÂåñÂÆå‰∫Ü');
        } else {
            console.warn('‚ö†Ô∏è GitHub APIÂàùÊúüÂåñË≠¶Âëä:', result.error);
        }
        return result;
    } catch (error) {
        console.error('‚ùå GitHub APIÈÄ£Êê∫ÂàùÊúüÂåñ„Ç®„É©„Éº:', error);
        return { success: false, error: error.message };
    }
}

// Ëá™Âãï‰øùÂ≠òÊ©üËÉΩ„ÇíÊó¢Â≠ò„ÅÆ„Éó„É≠„É≥„Éó„ÉàÊìç‰ΩúÈñ¢Êï∞„Å´Áµ±Âêà
async function autoSaveToGitHub() {
    if (githubConnector) {
        try {
            const data = {
                prompts: prompts
            };
            await githubConnector.autoSave(data);
        } catch (error) {
            console.warn('Ëá™Âãï‰øùÂ≠ò„Çí„Çπ„Ç≠„ÉÉ„Éó:', error.message);
        }
    }
}


// ==========================================================================
// Ëá™Âãï‰øùÂ≠òÊ©üËÉΩÁµ±ÂêàÔºàÊó¢Â≠òÈñ¢Êï∞„ÅÆ‰øÆÊ≠£Ôºâ
// ==========================================================================

// addPromptÈñ¢Êï∞„Çí‰øÆÊ≠£„Åó„Å¶GitHubËá™Âãï‰øùÂ≠ò„ÇíËøΩÂä†
async function addPromptWithAutoSave(data) {
    try {
        const result = await addPrompt(data);
        await autoSaveToGitHub();
        return result;
    } catch (error) {
        console.error('„Éó„É≠„É≥„Éó„ÉàËøΩÂä†„Ç®„É©„Éº:', error);
        throw error;
    }
}

// updatePromptÈñ¢Êï∞„Çí‰øÆÊ≠£„Åó„Å¶GitHubËá™Âãï‰øùÂ≠ò„ÇíËøΩÂä†
async function updatePromptWithAutoSave(id, data) {
    try {
        const result = await updatePrompt(id, data);
        await autoSaveToGitHub();
        return result;
    } catch (error) {
        console.error('„Éó„É≠„É≥„Éó„ÉàÊõ¥Êñ∞„Ç®„É©„Éº:', error);
        throw error;
    }
}

// deletePromptÈñ¢Êï∞„Çí‰øÆÊ≠£„Åó„Å¶GitHubËá™Âãï‰øùÂ≠ò„ÇíËøΩÂä†
async function deletePromptWithAutoSave(id) {
    try {
        const result = await deletePrompt(id);
        await autoSaveToGitHub();
        return result;
    } catch (error) {
        console.error('„Éó„É≠„É≥„Éó„ÉàÂâäÈô§„Ç®„É©„Éº:', error);
        throw error;
    }
}

// ==========================================================================
// Window API „Ç®„ÇØ„Çπ„Éù„Éº„ÉàÔºàGitHubÁâàÔºâ
// ==========================================================================

if (typeof window !== 'undefined') {
    window.promptHelper = {
        prompts,
        addPrompt: addPromptWithAutoSave,
        updatePrompt: updatePromptWithAutoSave,
        deletePrompt: deletePromptWithAutoSave,
        loadPrompts,
        savePrompts,
        downloadJSON,
        editFromDetail,
        deleteFromDetail,
        selectPrompt,
        closeDetailModal,
        // GitHub APIÈÄ£Êê∫
        githubSettings,
        githubConnector,
        autoSaveToGitHub,
        initializeGitHubConnection
    };
}

// ==========================================================================
// „Éá„Éê„ÉÉ„Ç∞„ÉªÁÆ°ÁêÜÁî®Èñ¢Êï∞
// ==========================================================================

function debugInfo() {
    return {
        promptsCount: prompts.length,
        prompts: prompts,
        githubSettings: githubSettings,
        localStorage: localStorage.getItem('promptsData')
    };
}

function clearLocalStorage() {
    localStorage.removeItem('promptsData');
    console.log('‚úÖ „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„ÅÆ„Éó„É≠„É≥„Éó„Éà„Éá„Éº„Çø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
    return '„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü';
}

// GitHub APIÊé•Á∂ö„ÉÜ„Çπ„ÉàÈñ¢Êï∞
async function testGitHubConnection() {
    if (!githubConnector) {
        showNotification('GitHub APIÈÄ£Êê∫„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì', 'error');
        return { success: false, error: 'ÈÄ£Êê∫Êú™Ë®≠ÂÆö' };
    }

    showNotification('GitHubÊé•Á∂ö„ÉÜ„Çπ„Éà‰∏≠...', 'info');
    const result = await githubConnector.testConnection();

    if (result.success) {
        showNotification('GitHub„Å®„ÅÆÊé•Á∂ö„Å´ÊàêÂäü„Åó„Åæ„Åó„Åü', 'success');
    } else {
        showNotification(`Êé•Á∂ö„ÉÜ„Çπ„Éà„Å´Â§±Êïó: ${result.error}`, 'error');
    }

    return result;
}

// ÊâãÂãïGitHubÂêåÊúüÂÆüË°å
async function manualSaveToGitHub() {
    if (!githubConnector) {
        showNotification('GitHub APIÈÄ£Êê∫„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì', 'error');
        return;
    }

    showNotification('GitHub‰øùÂ≠ò‰∏≠...', 'info');
    try {
        const data = { prompts: prompts };
        await githubConnector.updatePromptsFile(data);
        showNotification('GitHub„Å∏„ÅÆ‰øùÂ≠ò„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü', 'success');
    } catch (error) {
        showNotification(`GitHub‰øùÂ≠ò„Ç®„É©„Éº: ${error.message}`, 'error');
    }
}

// ==========================================================================
// GitHubË®≠ÂÆö„É¢„Éº„ÉÄ„É´Èñ¢ÈÄ£
// ==========================================================================

function showGitHubSettingsModal() {
    const modal = document.getElementById('github-settings-modal');
    const tokenInput = document.getElementById('github-token');

    // Êó¢Â≠ò„ÅÆ„Éà„Éº„ÇØ„É≥„ÇíË™≠„ÅøËæº„Åø
    const existingToken = localStorage.getItem('githubToken');
    if (existingToken) {
        tokenInput.value = existingToken;
    }

    modal.style.display = 'flex';
}

function hideGitHubSettingsModal() {
    document.getElementById('github-settings-modal').style.display = 'none';
    clearGitHubStatus();
}

function clearGitHubStatus() {
    const statusElement = document.getElementById('github-status');
    statusElement.textContent = '';
    statusElement.className = 'status-message';
}

function showGitHubStatus(message, type) {
    const statusElement = document.getElementById('github-status');
    statusElement.textContent = message;
    statusElement.className = `status-message ${type}`;
}

async function saveGitHubToken() {
    const token = document.getElementById('github-token').value.trim();

    if (!token) {
        showGitHubStatus('„Éà„Éº„ÇØ„É≥„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'error');
        return;
    }

    if (!token.startsWith('ghp_') && !token.startsWith('github_pat_')) {
        showGitHubStatus('Ê≠£„Åó„ÅÑGitHub Personal Access TokenÂΩ¢Âºè„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì', 'error');
        return;
    }

    try {
        // LocalStorage„Å´‰øùÂ≠ò
        localStorage.setItem('githubToken', token);

        // GitHub APIÈÄ£Êê∫„ÇíÂÜçÂàùÊúüÂåñ
        await initializeGitHubConnection();

        showGitHubStatus('GitHub Token„Åå‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü', 'success');
        showNotification('GitHubË®≠ÂÆö„Åå‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü', 'success');

        setTimeout(() => {
            hideGitHubSettingsModal();
        }, 1500);

    } catch (error) {
        console.error('GitHub Token‰øùÂ≠ò„Ç®„É©„Éº:', error);
        showGitHubStatus('‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', 'error');
    }
}

async function testGitHubConnectionFromModal() {
    const token = document.getElementById('github-token').value.trim();

    if (!token) {
        showGitHubStatus('„Åæ„Åö„Éà„Éº„ÇØ„É≥„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'error');
        return;
    }

    showGitHubStatus('Êé•Á∂ö„ÉÜ„Çπ„Éà‰∏≠...', 'info');

    try {
        // ‰∏ÄÊôÇÁöÑ„Å´„Éà„Éº„ÇØ„É≥„ÇíË®≠ÂÆö„Åó„Å¶„ÉÜ„Çπ„Éà
        const tempConnector = new GitHubConnector(
            githubSettings.owner,
            githubSettings.repo,
            githubSettings.branch
        );
        tempConnector.token = token;

        const result = await tempConnector.testConnection();

        if (result.success) {
            showGitHubStatus('‚úÖ GitHubÊé•Á∂öÊàêÂäüÔºÅ', 'success');
        } else {
            showGitHubStatus(`‚ùå Êé•Á∂öÂ§±Êïó: ${result.error}`, 'error');
        }

    } catch (error) {
        showGitHubStatus(`‚ùå Êé•Á∂ö„Ç®„É©„Éº: ${error.message}`, 'error');
    }
}

// GitHubÈñ¢ÈÄ£„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÅØsetupEventListenersÈñ¢Êï∞ÂÜÖ„ÅßË®≠ÂÆö

// ==========================================================================
// ChromeÊã°ÂºµÊ©üËÉΩ„Åã„Çâ„ÅÆTokenÂèó‰ø°
// ==========================================================================

// URL„Éë„É©„É°„Éº„Çø„Åã„ÇâToken„ÇíÂèñÂæó
function getTokenFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const token = urlParams.get('token');
    if (token) {
        localStorage.setItem('githubToken', token);
        console.log('URL„Éë„É©„É°„Éº„Çø„Åã„ÇâGitHub Token„ÇíË®≠ÂÆö„Åó„Åæ„Åó„Åü');
        // URL„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        window.history.replaceState({}, document.title, window.location.pathname);
        showNotification('ChromeÊã°ÂºµÊ©üËÉΩ„Åã„ÇâGitHub Token„ÇíÂèó‰ø°„Åó„Åæ„Åó„Åü', 'success');
        return true;
    }
    return false;
}

// ChromeÊã°ÂºµÊ©üËÉΩ„Åã„Çâ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏Âèó‰ø°
if (typeof chrome !== 'undefined' && chrome.runtime) {
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
        if (request.action === 'setGitHubToken') {
            localStorage.setItem('githubToken', request.token);
            console.log('ChromeÊã°ÂºµÊ©üËÉΩ„Åã„ÇâGitHub Token„ÇíÂèó‰ø°„Åó„Åæ„Åó„Åü');
            showNotification('GitHub Token„ÅåÂêåÊúü„Åï„Çå„Åæ„Åó„Åü', 'success');

            // GitHub APIÈÄ£Êê∫„ÇíÂÜçÂàùÊúüÂåñ
            initializeGitHubConnection();

            sendResponse({ success: true });
        }
    });
}

// „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´URL„Éë„É©„É°„Éº„Çø„Çí„ÉÅ„Çß„ÉÉ„ÇØ
document.addEventListener('DOMContentLoaded', () => {
    getTokenFromURL();
});

console.log('‚úÖ AI Prompt Helper Editor v7.0.0 with GitHub API - ÂàùÊúüÂåñÂÆå‰∫Ü');
